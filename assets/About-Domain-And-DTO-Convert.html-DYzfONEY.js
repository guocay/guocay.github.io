import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-BTSdHDNU.js";const p={},e=t(`<h2 id="问题描述" tabindex="-1"><a class="header-anchor" href="#问题描述"><span>问题描述</span></a></h2><blockquote><p>我们后端在开发的过程中总是在domain(数据库映射对象)和dto(数据传输对象)之间进行数据互转.以匹配对象在各生命周期的运行.</p></blockquote><blockquote><p>在实际的开发中,我们发现大多数的domain对象和dto对象内的字段完全一致.创建两个内容完全一样的类.从大部分情况下考虑都显得多余.</p></blockquote><blockquote><p>代码中经常出现大量的代码如下</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>dto<span class="token punctuation">.</span><span class="token function">setAttr</span><span class="token punctuation">(</span>domain<span class="token punctuation">.</span><span class="token function">getAttr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>冗长,且不优雅.</p></blockquote><h2 id="问题思考" tabindex="-1"><a class="header-anchor" href="#问题思考"><span>问题思考</span></a></h2><ol><li></li></ol><p>市面上有很多用于Bean对象之间拷贝的工具类如Apache和SpringFramework的BeanUtils,他的实现机制时通过运行时反射将同名属性之间进行拷贝,且这些工具最大的问题还在于为了适配更多的情况做了很多的其他工作.这对于我们只是需要简单的值拷贝不太友善;<br> 2. MapStruct是一个通过定义转换接口,并基于JSR269在编译期实现对象互转的工具.但这种工具的弊端在于仅能实现一对一的转换(<br> 单向,一个接口仅能实现一个特定类转换到另一个特定类).<br> 3. 我们现在的需求是,可以运行时动态的一对多转换,可以一个属性对多个属性(不同名)转换和可以不再写更多的相同类;</p><h2 id="编码逻辑" tabindex="-1"><a class="header-anchor" href="#编码逻辑"><span>编码逻辑</span></a></h2><ol><li>我们抽象出一个&quot;拆装箱&quot;的概念,domain是一个拆箱后的对象(可以理解为拆箱后存入数据库),dto是一个装箱后对象(<br> 可以理解为装箱后运走).</li><li>在现实生活中很多货物是可以从仓库中拿出直接用于运输的.所以,当装箱后的对象和拆箱后的对象本质上是一个对象,拆箱后的对象也就是一个装箱后的对象;</li><li>基于此,我们可以抽象出对象的集成关系:domain对象继承DTO对象;</li><li>在对象间数据拷贝方面,我们可以通过自定义注解指定对象间互转的逻辑.并在对应对象的父类中定义函数在运行时动态的反射拷贝值;</li></ol><h2 id="实现方案" tabindex="-1"><a class="header-anchor" href="#实现方案"><span>实现方案</span></a></h2><p>domain与DTO之间的关系; View 继承 Transport</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * DTO对象
 *
 * 数据传输对象基类
 * <span class="token keyword">@author</span> GuoKai
 * <span class="token keyword">@date</span> 2021/9/28
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Transport</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 用于数据传输对象的拆箱
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> 拆箱后的类型
     * <span class="token keyword">@return</span> 拆箱后的对象
     */</span>
    <span class="token keyword">default</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">View</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">unBoxing</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">T</span> view <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// todo 循环获取当前类的字段</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// todo 过滤出需要拆箱的字段</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>field <span class="token operator">-&gt;</span> <span class="token class-name">AnnotationUtil</span><span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span><span class="token class-name">Unboxing</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>field <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token comment">// todo 获取字段中所有 Unboxing 描述信息</span>
                    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getAnnotationsByType</span><span class="token punctuation">(</span><span class="token class-name">Unboxing</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            <span class="token comment">// todo 过滤出需要转换的类</span>
                            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>anno <span class="token operator">-&gt;</span> clazz<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>anno<span class="token punctuation">.</span><span class="token function">clazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>anno <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                                <span class="token keyword">var</span> viewField <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> anno<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token comment">// todo 设置字段反射,绕过权限校验</span>
                                field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                viewField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token comment">// todo 设置值</span>
                                <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> viewField<span class="token punctuation">,</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> view<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * domain对象
 *
 * 上帝的归上帝,凯撒的归凯撒
 * 抽象出这个类是为了映射视图,从而尽可能的不在项目中书写SQL.
 * <span class="token keyword">@author</span> GuoKai
 * <span class="token keyword">@date</span> 2021/8/19
 */</span>
<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">View</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">View</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Transport</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 用于数据库对象装箱
     * <span class="token keyword">@param</span> <span class="token parameter">clazz</span> 装箱的类描述
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>F<span class="token punctuation">&gt;</span></span> 装箱的类型
     * <span class="token keyword">@return</span> 装箱后的对象
     */</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">F</span> <span class="token keyword">extends</span> <span class="token class-name">Transport</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">F</span> <span class="token function">boxing</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">F</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">F</span> tran <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// todo 循环获取当前类的字段</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// todo 过滤出需要拆箱的字段</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>field <span class="token operator">-&gt;</span> <span class="token class-name">AnnotationUtil</span><span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> <span class="token class-name">Boxing</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>field <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token comment">// todo 获取字段中所有 Boxing 描述信息</span>
                    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getAnnotationsByType</span><span class="token punctuation">(</span><span class="token class-name">Boxing</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            <span class="token comment">// todo 过滤出需要转换的类</span>
                            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>anno <span class="token operator">-&gt;</span> clazz<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>anno<span class="token punctuation">.</span><span class="token function">clazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>anno <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                                <span class="token keyword">var</span> tranField <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> anno<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token comment">// todo 设置字段反射,绕过权限校验</span>
                                field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                tranField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token comment">// todo 设置值</span>
                                <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>tran<span class="token punctuation">,</span> tranField<span class="token punctuation">,</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> tran<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义注解,设置属性间关系</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 数据库实体对象装箱时的属性指定
 * <span class="token keyword">@author</span> GuoKai
 * <span class="token keyword">@date</span> 2021/9/28
 */</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">Boxing<span class="token punctuation">.</span>List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Boxing</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 用于指定装箱的数据传输类
     * <span class="token keyword">@return</span> 装箱的类
     */</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Transport</span><span class="token punctuation">&gt;</span></span> <span class="token function">clazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 用于指定类中的字段
     * <span class="token keyword">@return</span> 类中的字段名
     */</span>
    <span class="token class-name">String</span> <span class="token function">field</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Documented</span>
    <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@interface</span> <span class="token class-name">List</span><span class="token punctuation">{</span>
        <span class="token class-name">Boxing</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 数据传输对象拆箱时的属性指定
 * <span class="token keyword">@author</span> GuoKai
 * <span class="token keyword">@date</span> 2021/9/28
 */</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">Unboxing<span class="token punctuation">.</span>List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Unboxing</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 用于指定装箱的数据传输类
     * <span class="token keyword">@return</span> 装箱的类
     */</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">View</span><span class="token punctuation">&gt;</span></span> <span class="token function">clazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 用于指定类中的字段
     * <span class="token keyword">@return</span> 类中的字段名
     */</span>
    <span class="token class-name">String</span> <span class="token function">field</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Documented</span>
    <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@interface</span> <span class="token class-name">List</span><span class="token punctuation">{</span>
        <span class="token class-name">Unboxing</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用例子</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// domain对象</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Table</span> <span class="token keyword">extends</span> <span class="token class-name">View</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Table</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Boxing</span><span class="token punctuation">(</span>clazz<span class="token operator">=</span><span class="token class-name">TableDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>field<span class="token operator">=</span><span class="token string">&quot;nameDto&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Boxing</span><span class="token punctuation">(</span>clazz<span class="token operator">=</span><span class="token class-name">TableDto1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>field<span class="token operator">=</span><span class="token string">&quot;nameDto1&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// DTO对象1</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TableDto</span> <span class="token keyword">implements</span> <span class="token class-name">Transport</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Unboxing</span><span class="token punctuation">(</span>clazz<span class="token operator">=</span><span class="token class-name">Table</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>field<span class="token operator">=</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> nameDto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// DTO对象2</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TableDto1</span> <span class="token keyword">implements</span> <span class="token class-name">Transport</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Unboxing</span><span class="token punctuation">(</span>clazz<span class="token operator">=</span><span class="token class-name">Table</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>field<span class="token operator">=</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> nameDto1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 拆箱</span>
<span class="token class-name">Table</span> table <span class="token operator">=</span> <span class="token class-name">TableDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unBoxing</span><span class="token punctuation">(</span><span class="token class-name">Table</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Table</span> table1 <span class="token operator">=</span> <span class="token class-name">TableDto1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unBoxing</span><span class="token punctuation">(</span><span class="token class-name">Table</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 装箱</span>
<span class="token class-name">TableDto</span> tableDto <span class="token operator">=</span> <span class="token class-name">Table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxing</span><span class="token punctuation">(</span><span class="token class-name">TableDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">TableDto1</span> tableDto1 <span class="token operator">=</span> <span class="token class-name">Table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxing</span><span class="token punctuation">(</span><span class="token class-name">TableDto1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ps" tabindex="-1"><a class="header-anchor" href="#ps"><span>PS</span></a></h2><ol><li>boxing函数和unboxing函数在转换时,可以基于&quot;享元模式&quot;做一些缓存以优化性能;</li></ol>`,20),o=[e];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","About-Domain-And-DTO-Convert.html.vue"]]),r=JSON.parse('{"path":"/article/About-Domain-And-DTO-Convert.html","title":"关于domain对象与DTO对象间的相互拷贝的思考与优化思路","lang":"zh-CN","frontmatter":{"title":"关于domain对象与DTO对象间的相互拷贝的思考与优化思路","icon":"note","isOriginal":true,"date":"2021-10-27T13:51:07.000Z","tag":["Mekatok","开发笔记"],"category":"Mekatok","description":"问题描述 我们后端在开发的过程中总是在domain(数据库映射对象)和dto(数据传输对象)之间进行数据互转.以匹配对象在各生命周期的运行. 在实际的开发中,我们发现大多数的domain对象和dto对象内的字段完全一致.创建两个内容完全一样的类.从大部分情况下考虑都显得多余. 代码中经常出现大量的代码如下 冗长,且不优雅. 问题思考 市面上有很多用于B...","head":[["meta",{"property":"og:url","content":"https://blog.guocay.com/article/About-Domain-And-DTO-Convert.html"}],["meta",{"property":"og:site_name","content":"GuoCay"}],["meta",{"property":"og:title","content":"关于domain对象与DTO对象间的相互拷贝的思考与优化思路"}],["meta",{"property":"og:description","content":"问题描述 我们后端在开发的过程中总是在domain(数据库映射对象)和dto(数据传输对象)之间进行数据互转.以匹配对象在各生命周期的运行. 在实际的开发中,我们发现大多数的domain对象和dto对象内的字段完全一致.创建两个内容完全一样的类.从大部分情况下考虑都显得多余. 代码中经常出现大量的代码如下 冗长,且不优雅. 问题思考 市面上有很多用于B..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-18T11:09:04.000Z"}],["meta",{"property":"article:author","content":"GuoCay"}],["meta",{"property":"article:tag","content":"Mekatok"}],["meta",{"property":"article:tag","content":"开发笔记"}],["meta",{"property":"article:published_time","content":"2021-10-27T13:51:07.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-18T11:09:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"关于domain对象与DTO对象间的相互拷贝的思考与优化思路\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-10-27T13:51:07.000Z\\",\\"dateModified\\":\\"2023-05-18T11:09:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GuoCay\\",\\"email\\":\\"guocay@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"问题描述","slug":"问题描述","link":"#问题描述","children":[]},{"level":2,"title":"问题思考","slug":"问题思考","link":"#问题思考","children":[]},{"level":2,"title":"编码逻辑","slug":"编码逻辑","link":"#编码逻辑","children":[]},{"level":2,"title":"实现方案","slug":"实现方案","link":"#实现方案","children":[]},{"level":2,"title":"PS","slug":"ps","link":"#ps","children":[]}],"git":{"createdTime":1684408144000,"updatedTime":1684408144000,"contributors":[{"name":"GuoCay","email":"guocay@gmail.com","commits":1}]},"readingTime":{"minutes":4.45,"words":1334},"localizedDate":"2021年10月27日","excerpt":"<h2>问题描述</h2>\\n<blockquote>\\n<p>我们后端在开发的过程中总是在domain(数据库映射对象)和dto(数据传输对象)之间进行数据互转.以匹配对象在各生命周期的运行.</p>\\n</blockquote>\\n<blockquote>\\n<p>在实际的开发中,我们发现大多数的domain对象和dto对象内的字段完全一致.创建两个内容完全一样的类.从大部分情况下考虑都显得多余.</p>\\n</blockquote>\\n<blockquote>\\n<p>代码中经常出现大量的代码如下</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code>dto<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setAttr</span><span class=\\"token punctuation\\">(</span>domain<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getAttr</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>\\n</code></pre></div><p>冗长,且不优雅.</p>\\n</blockquote>","autoDesc":true}');export{d as comp,r as data};
