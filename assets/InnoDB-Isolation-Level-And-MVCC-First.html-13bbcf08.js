const e=JSON.parse('{"key":"v-62e0a150","path":"/article/InnoDB-Isolation-Level-And-MVCC-First.html","title":"InnoDB中的隔离级别与MVCC - MVCC的快照读与并发读","lang":"zh-CN","frontmatter":{"title":"InnoDB中的隔离级别与MVCC - MVCC的快照读与并发读","icon":"note","isOriginal":true,"date":"2023-06-28T00:00:00.000Z","tag":["MySQL","InnoDB"],"category":"MySQL","description":"MVCC InnoDB存储引擎的并发是通过MVCC(Multi-Version Concurrency Control)实现的. 与MVCC相对的是LBCC(Lock-Based Concurrency Control), 对比来说好处在于 读写不互斥. 在读多写少的应用中,读写不冲突是很重要的,可大幅度增加系统的并发性能. 这也是为什么现阶段大部分关系型数据库都是支持MVCC的. Snapshot Read &amp; Current Read","head":[["meta",{"property":"og:url","content":"https://guocay.github.io/article/InnoDB-Isolation-Level-And-MVCC-First.html"}],["meta",{"property":"og:site_name","content":"GuoCay"}],["meta",{"property":"og:title","content":"InnoDB中的隔离级别与MVCC - MVCC的快照读与并发读"}],["meta",{"property":"og:description","content":"MVCC InnoDB存储引擎的并发是通过MVCC(Multi-Version Concurrency Control)实现的. 与MVCC相对的是LBCC(Lock-Based Concurrency Control), 对比来说好处在于 读写不互斥. 在读多写少的应用中,读写不冲突是很重要的,可大幅度增加系统的并发性能. 这也是为什么现阶段大部分关系型数据库都是支持MVCC的. Snapshot Read &amp; Current Read"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-28T08:58:19.000Z"}],["meta",{"property":"article:author","content":"GuoCay"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:tag","content":"InnoDB"}],["meta",{"property":"article:published_time","content":"2023-06-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-28T08:58:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"InnoDB中的隔离级别与MVCC - MVCC的快照读与并发读\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-28T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-28T08:58:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GuoCay\\",\\"email\\":\\"guocay@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"Snapshot Read & Current Read","slug":"snapshot-read-current-read","link":"#snapshot-read-current-read","children":[]},{"level":2,"title":"DML执行过程","slug":"dml执行过程","link":"#dml执行过程","children":[]},{"level":2,"title":"Two-Phase Locking","slug":"two-phase-locking","link":"#two-phase-locking","children":[]},{"level":2,"title":"事务隔离级别(Isolation Level)","slug":"事务隔离级别-isolation-level","link":"#事务隔离级别-isolation-level","children":[]},{"level":2,"title":"SQL语句的加锁过程分析","slug":"sql语句的加锁过程分析","link":"#sql语句的加锁过程分析","children":[]},{"level":2,"title":"死锁原理与分析","slug":"死锁原理与分析","link":"#死锁原理与分析","children":[]}],"git":{"createdTime":1687942699000,"updatedTime":1687942699000,"contributors":[{"name":"GuoCay","email":"guocay@gmail.com","commits":1}]},"readingTime":{"minutes":6.83,"words":2050},"filePathRelative":"article/InnoDB-Isolation-Level-And-MVCC-First.md","localizedDate":"2023年6月28日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">MVCC</p>\\n<p>InnoDB存储引擎的并发是通过MVCC(Multi-Version Concurrency Control)实现的. 与MVCC相对的是LBCC(Lock-Based Concurrency Control), 对比来说好处在于 <strong>读写不互斥</strong>.\\n在读多写少的应用中,读写不冲突是很重要的,可大幅度增加系统的并发性能. 这也是为什么现阶段大部分关系型数据库都是支持MVCC的.</p>\\n</div>\\n<h2> Snapshot Read &amp; Current Read</h2>","autoDesc":true}');export{e as data};
