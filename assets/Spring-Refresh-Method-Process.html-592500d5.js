const e=JSON.parse('{"key":"v-df157214","path":"/article/Spring-Refresh-Method-Process.html","title":"Spring框架refresh()执行流程","lang":"zh-CN","frontmatter":{"title":"Spring框架refresh()执行流程","icon":"note","isOriginal":true,"date":"2023-04-26T00:00:00.000Z","tag":["Spring","开发笔记"],"category":"Java","description":"Spring框架refresh函数执行流程 prepareRefresh(): 准备刷新 设置启动时间 容器关闭标示符设置为false 容器可用标示符设置为true initPropertySources(): 钩子函数, 初始化属性资源, getEnvironment().validateRequiredProperties(): 验证必要属性必须存在. 清空已有的监听器(如果有的话),并重新从applicationListeners属性中加载","head":[["meta",{"property":"og:url","content":"https://guocay.github.io/article/Spring-Refresh-Method-Process.html"}],["meta",{"property":"og:site_name","content":"GuoCay"}],["meta",{"property":"og:title","content":"Spring框架refresh()执行流程"}],["meta",{"property":"og:description","content":"Spring框架refresh函数执行流程 prepareRefresh(): 准备刷新 设置启动时间 容器关闭标示符设置为false 容器可用标示符设置为true initPropertySources(): 钩子函数, 初始化属性资源, getEnvironment().validateRequiredProperties(): 验证必要属性必须存在. 清空已有的监听器(如果有的话),并重新从applicationListeners属性中加载"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-13T09:45:13.000Z"}],["meta",{"property":"article:author","content":"GuoCay"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"开发笔记"}],["meta",{"property":"article:published_time","content":"2023-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-13T09:45:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring框架refresh()执行流程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-13T09:45:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GuoCay\\",\\"email\\":\\"guocay@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"prepareRefresh(): 准备刷新","slug":"preparerefresh-准备刷新","link":"#preparerefresh-准备刷新","children":[]},{"level":2,"title":"obtainFreshBeanFactory(): 获取Bean工厂","slug":"obtainfreshbeanfactory-获取bean工厂","link":"#obtainfreshbeanfactory-获取bean工厂","children":[{"level":3,"title":"如果上下文中已经存在Bean工厂,将先销毁.","slug":"如果上下文中已经存在bean工厂-将先销毁","link":"#如果上下文中已经存在bean工厂-将先销毁","children":[]},{"level":3,"title":"createBeanFactory(): 创建Bean工厂,使用DefaultListableBeanFactory对象;","slug":"createbeanfactory-创建bean工厂-使用defaultlistablebeanfactory对象","link":"#createbeanfactory-创建bean工厂-使用defaultlistablebeanfactory对象","children":[]},{"level":3,"title":"customizeBeanFactory(): 自定义设置Bean工厂","slug":"customizebeanfactory-自定义设置bean工厂","link":"#customizebeanfactory-自定义设置bean工厂","children":[]},{"level":3,"title":"loadBeanDefinitions(): 加载Bean定义信息","slug":"loadbeandefinitions-加载bean定义信息","link":"#loadbeandefinitions-加载bean定义信息","children":[]}]},{"level":2,"title":"prepareBeanFactory(): 准备Bean工厂","slug":"preparebeanfactory-准备bean工厂","link":"#preparebeanfactory-准备bean工厂","children":[{"level":3,"title":"设置Bean工厂的类加载器","slug":"设置bean工厂的类加载器","link":"#设置bean工厂的类加载器","children":[]},{"level":3,"title":"如果不忽略SpEL表达式,则设置StandardBeanExpressionResolver对象用于解析SpEL表达式;","slug":"如果不忽略spel表达式-则设置standardbeanexpressionresolver对象用于解析spel表达式","link":"#如果不忽略spel表达式-则设置standardbeanexpressionresolver对象用于解析spel表达式","children":[]},{"level":3,"title":"设置属性编辑注册器","slug":"设置属性编辑注册器","link":"#设置属性编辑注册器","children":[]},{"level":3,"title":"添加一个用于Aware感知的PostProcessor","slug":"添加一个用于aware感知的postprocessor","link":"#添加一个用于aware感知的postprocessor","children":[]},{"level":3,"title":"忽略一部分Aware的实现类, 因为这个时候还无法感知这部分动作","slug":"忽略一部分aware的实现类-因为这个时候还无法感知这部分动作","link":"#忽略一部分aware的实现类-因为这个时候还无法感知这部分动作","children":[]},{"level":3,"title":"注册一批 可解析依赖项","slug":"注册一批-可解析依赖项","link":"#注册一批-可解析依赖项","children":[]},{"level":3,"title":"注册一个用于监听探测的PostProcessor类.","slug":"注册一个用于监听探测的postprocessor类","link":"#注册一个用于监听探测的postprocessor类","children":[]},{"level":3,"title":"设置 LoadTimeWeaver","slug":"设置-loadtimeweaver","link":"#设置-loadtimeweaver","children":[]},{"level":3,"title":"注册一批环境变量","slug":"注册一批环境变量","link":"#注册一批环境变量","children":[]}]},{"level":2,"title":"postProcessBeanFactory(): 钩子函数.通知子容器BeanFactory准备好了","slug":"postprocessbeanfactory-钩子函数-通知子容器beanfactory准备好了","link":"#postprocessbeanfactory-钩子函数-通知子容器beanfactory准备好了","children":[]},{"level":2,"title":"invokeBeanFactoryPostProcessors(): 执行Bean工厂后置处理器","slug":"invokebeanfactorypostprocessors-执行bean工厂后置处理器","link":"#invokebeanfactorypostprocessors-执行bean工厂后置处理器","children":[]},{"level":2,"title":"registerBeanPostProcessors(): 注册Bean的后置处理器","slug":"registerbeanpostprocessors-注册bean的后置处理器","link":"#registerbeanpostprocessors-注册bean的后置处理器","children":[]},{"level":2,"title":"initMessageSource(): 初始化消息源","slug":"initmessagesource-初始化消息源","link":"#initmessagesource-初始化消息源","children":[]},{"level":2,"title":"initApplicationEventMulticaster(): 初始化事件传播器","slug":"initapplicationeventmulticaster-初始化事件传播器","link":"#initapplicationeventmulticaster-初始化事件传播器","children":[]},{"level":2,"title":"onRefresh(): 钩子函数,支持子类对刷新的扩展","slug":"onrefresh-钩子函数-支持子类对刷新的扩展","link":"#onrefresh-钩子函数-支持子类对刷新的扩展","children":[]},{"level":2,"title":"registerListeners(): 注册监听","slug":"registerlisteners-注册监听","link":"#registerlisteners-注册监听","children":[]},{"level":2,"title":"finishBeanFactoryInitialization(): 结束BeanFactory初始化,并初始化一些特殊Bean对象.比如非懒加载的Bean.","slug":"finishbeanfactoryinitialization-结束beanfactory初始化-并初始化一些特殊bean对象-比如非懒加载的bean","link":"#finishbeanfactoryinitialization-结束beanfactory初始化-并初始化一些特殊bean对象-比如非懒加载的bean","children":[{"level":3,"title":"初始化上下文转换服务.","slug":"初始化上下文转换服务","link":"#初始化上下文转换服务","children":[]},{"level":3,"title":"如果没有指定 标签解析器, 就使用环境中的默认转换器进行转换 getEnvironment().resolvePlaceholders(strVal).","slug":"如果没有指定-标签解析器-就使用环境中的默认转换器进行转换-getenvironment-resolveplaceholders-strval","link":"#如果没有指定-标签解析器-就使用环境中的默认转换器进行转换-getenvironment-resolveplaceholders-strval","children":[]},{"level":3,"title":"尽早初始化 LoadTimeWeaverAware bean，以便尽早注册其变压器。","slug":"尽早初始化-loadtimeweaveraware-bean-以便尽早注册其变压器。","link":"#尽早初始化-loadtimeweaveraware-bean-以便尽早注册其变压器。","children":[]},{"level":3,"title":"设置临时类加载器为null, 停止使用临时类加载器.","slug":"设置临时类加载器为null-停止使用临时类加载器","link":"#设置临时类加载器为null-停止使用临时类加载器","children":[]},{"level":3,"title":"freezeConfiguration(): 冻结所有bean定义信息.","slug":"freezeconfiguration-冻结所有bean定义信息","link":"#freezeconfiguration-冻结所有bean定义信息","children":[]},{"level":3,"title":"preInstantiateSingletons(): 初始化非懒加载的bean","slug":"preinstantiatesingletons-初始化非懒加载的bean","link":"#preinstantiatesingletons-初始化非懒加载的bean","children":[]}]},{"level":2,"title":"finishRefresh(): 结束刷新, 并发布结束刷新事件.","slug":"finishrefresh-结束刷新-并发布结束刷新事件","link":"#finishrefresh-结束刷新-并发布结束刷新事件","children":[{"level":3,"title":"clearResourceCaches(): 清空资源缓存","slug":"clearresourcecaches-清空资源缓存","link":"#clearresourcecaches-清空资源缓存","children":[]},{"level":3,"title":"initLifecycleProcessor(): 初始化生命周期管理","slug":"initlifecycleprocessor-初始化生命周期管理","link":"#initlifecycleprocessor-初始化生命周期管理","children":[]},{"level":3,"title":"getLifecycleProcessor().onRefresh(): 刷新生命周期管理器","slug":"getlifecycleprocessor-onrefresh-刷新生命周期管理器","link":"#getlifecycleprocessor-onrefresh-刷新生命周期管理器","children":[]},{"level":3,"title":"发布上下文刷新事件","slug":"发布上下文刷新事件","link":"#发布上下文刷新事件","children":[]},{"level":3,"title":"参与 LiveBeansView MBean（如果处于活动状态）","slug":"参与-livebeansview-mbean-如果处于活动状态","link":"#参与-livebeansview-mbean-如果处于活动状态","children":[]}]}],"git":{"createdTime":1682910292000,"updatedTime":1683971113000,"contributors":[{"name":"GuoCay","email":"guocay@gmail.com","commits":1},{"name":"aCay","email":"guocay@gmail.com","commits":1}]},"readingTime":{"minutes":3.85,"words":1156},"filePathRelative":"article/Spring-Refresh-Method-Process.md","localizedDate":"2023年4月26日","excerpt":"<figure><img src=\\"/docs/images/20230426-002.png\\" alt=\\"Spring框架refresh函数执行流程\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>Spring框架refresh函数执行流程</figcaption></figure>\\n<h2> prepareRefresh(): 准备刷新</h2>\\n<blockquote>\\n<ul>\\n<li>设置启动时间</li>\\n<li>容器关闭标示符设置为false</li>\\n<li>容器可用标示符设置为true</li>\\n<li>initPropertySources(): 钩子函数, 初始化属性资源,</li>\\n<li>getEnvironment().validateRequiredProperties(): 验证必要属性必须存在.</li>\\n<li>清空已有的监听器(如果有的话),并重新从applicationListeners属性中加载</li>\\n</ul>\\n</blockquote>","autoDesc":true}');export{e as data};
