import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as n,a as r}from"./app-BTSdHDNU.js";const i="/docs/images/20230426-002.png",t={},s=r('<figure><img src="'+i+'" alt="Spring框架refresh函数执行流程" tabindex="0" loading="lazy"><figcaption>Spring框架refresh函数执行流程</figcaption></figure><h2 id="preparerefresh-准备刷新" tabindex="-1"><a class="header-anchor" href="#preparerefresh-准备刷新"><span>prepareRefresh(): 准备刷新</span></a></h2><blockquote><ul><li>设置启动时间</li><li>容器关闭标示符设置为false</li><li>容器可用标示符设置为true</li><li>initPropertySources(): 钩子函数, 初始化属性资源,</li><li>getEnvironment().validateRequiredProperties(): 验证必要属性必须存在.</li><li>清空已有的监听器(如果有的话),并重新从applicationListeners属性中加载</li></ul></blockquote><h2 id="obtainfreshbeanfactory-获取bean工厂" tabindex="-1"><a class="header-anchor" href="#obtainfreshbeanfactory-获取bean工厂"><span>obtainFreshBeanFactory(): 获取Bean工厂</span></a></h2><h3 id="如果上下文中已经存在bean工厂-将先销毁" tabindex="-1"><a class="header-anchor" href="#如果上下文中已经存在bean工厂-将先销毁"><span>如果上下文中已经存在Bean工厂,将先销毁.</span></a></h3><h3 id="createbeanfactory-创建bean工厂-使用defaultlistablebeanfactory对象" tabindex="-1"><a class="header-anchor" href="#createbeanfactory-创建bean工厂-使用defaultlistablebeanfactory对象"><span>createBeanFactory(): 创建Bean工厂,使用DefaultListableBeanFactory对象;</span></a></h3><h3 id="customizebeanfactory-自定义设置bean工厂" tabindex="-1"><a class="header-anchor" href="#customizebeanfactory-自定义设置bean工厂"><span>customizeBeanFactory(): 自定义设置Bean工厂</span></a></h3><blockquote><ul><li>是否允许Bean定义覆盖</li><li>是否允许循环引用</li></ul></blockquote><h3 id="loadbeandefinitions-加载bean定义信息" tabindex="-1"><a class="header-anchor" href="#loadbeandefinitions-加载bean定义信息"><span>loadBeanDefinitions(): 加载Bean定义信息</span></a></h3><blockquote><ul><li>创建BeanDefinitionReader</li><li>配置BeanDefinitionReader,关联上下文</li><li>initBeanDefinitionReader(): 初始化这个Reader对象</li><li>loadBeanDefinitions(): 加载Bean定义信息</li></ul></blockquote><h2 id="preparebeanfactory-准备bean工厂" tabindex="-1"><a class="header-anchor" href="#preparebeanfactory-准备bean工厂"><span>prepareBeanFactory(): 准备Bean工厂</span></a></h2><h3 id="设置bean工厂的类加载器" tabindex="-1"><a class="header-anchor" href="#设置bean工厂的类加载器"><span>设置Bean工厂的类加载器</span></a></h3><h3 id="如果不忽略spel表达式-则设置standardbeanexpressionresolver对象用于解析spel表达式" tabindex="-1"><a class="header-anchor" href="#如果不忽略spel表达式-则设置standardbeanexpressionresolver对象用于解析spel表达式"><span>如果不忽略SpEL表达式,则设置StandardBeanExpressionResolver对象用于解析SpEL表达式;</span></a></h3><h3 id="设置属性编辑注册器" tabindex="-1"><a class="header-anchor" href="#设置属性编辑注册器"><span>设置属性编辑注册器</span></a></h3><h3 id="添加一个用于aware感知的postprocessor" tabindex="-1"><a class="header-anchor" href="#添加一个用于aware感知的postprocessor"><span>添加一个用于Aware感知的PostProcessor</span></a></h3><h3 id="忽略一部分aware的实现类-因为这个时候还无法感知这部分动作" tabindex="-1"><a class="header-anchor" href="#忽略一部分aware的实现类-因为这个时候还无法感知这部分动作"><span>忽略一部分Aware的实现类, 因为这个时候还无法感知这部分动作</span></a></h3><blockquote><ul><li>EnvironmentAware</li><li>EmbeddedValueResolverAware</li><li>ResourceLoaderAware</li><li>ApplicationEventPublisherAware</li><li>MessageSourceAware</li><li>ApplicationContextAware</li><li>ApplicationStartupAware</li></ul></blockquote><h3 id="注册一批-可解析依赖项" tabindex="-1"><a class="header-anchor" href="#注册一批-可解析依赖项"><span>注册一批 可解析依赖项</span></a></h3><blockquote><ul><li>BeanFactory</li><li>ResourceLoader</li><li>ApplicationEventPublisher</li><li>ApplicationContext</li></ul></blockquote><h3 id="注册一个用于监听探测的postprocessor类" tabindex="-1"><a class="header-anchor" href="#注册一个用于监听探测的postprocessor类"><span>注册一个用于监听探测的PostProcessor类.</span></a></h3><h3 id="设置-loadtimeweaver" tabindex="-1"><a class="header-anchor" href="#设置-loadtimeweaver"><span>设置 LoadTimeWeaver</span></a></h3><h3 id="注册一批环境变量" tabindex="-1"><a class="header-anchor" href="#注册一批环境变量"><span>注册一批环境变量</span></a></h3><blockquote><ul><li>ENVIRONMENT_BEAN_NAME</li><li>SYSTEM_PROPERTIES_BEAN_NAME</li><li>SYSTEM_ENVIRONMENT_BEAN_NAME</li><li>APPLICATION_STARTUP_BEAN_NAME</li></ul></blockquote><h2 id="postprocessbeanfactory-钩子函数-通知子容器beanfactory准备好了" tabindex="-1"><a class="header-anchor" href="#postprocessbeanfactory-钩子函数-通知子容器beanfactory准备好了"><span>postProcessBeanFactory(): 钩子函数.通知子容器BeanFactory准备好了</span></a></h2><h2 id="invokebeanfactorypostprocessors-执行bean工厂后置处理器" tabindex="-1"><a class="header-anchor" href="#invokebeanfactorypostprocessors-执行bean工厂后置处理器"><span>invokeBeanFactoryPostProcessors(): 执行Bean工厂后置处理器</span></a></h2><blockquote><ul><li>添加LoadTimeWeaverAwareProcessor</li><li>添加临时类加载器 ContextTypeMatchClassLoader</li></ul></blockquote><h2 id="registerbeanpostprocessors-注册bean的后置处理器" tabindex="-1"><a class="header-anchor" href="#registerbeanpostprocessors-注册bean的后置处理器"><span>registerBeanPostProcessors(): 注册Bean的后置处理器</span></a></h2><blockquote><ul><li>添加BeanPostProcessor处理器, 通过BeanPostProcessorChecker</li><li>注册支持优先排序的后置处理器</li><li>注册不支持排序的后置处理器(所有的)</li><li>注册内部后置处理器</li><li>添加(处理)内部的监听类型的后置处理器</li></ul></blockquote><h2 id="initmessagesource-初始化消息源" tabindex="-1"><a class="header-anchor" href="#initmessagesource-初始化消息源"><span>initMessageSource(): 初始化消息源</span></a></h2><blockquote><p>判断当前Bean工厂中是否存在 MESSAGE_SOURCE_BEAN_NAME 对象,如不存在则创建<br> DelegatingMessageSource对象,并注册进容器.如存在则使用工厂中的消息源对象.</p></blockquote><h2 id="initapplicationeventmulticaster-初始化事件传播器" tabindex="-1"><a class="header-anchor" href="#initapplicationeventmulticaster-初始化事件传播器"><span>initApplicationEventMulticaster(): 初始化事件传播器</span></a></h2><blockquote><p>判断当前Bean工厂中是否存在 APPLICATION_EVENT_MULTICASTER_BEAN_NAME 对象,如存在则使用,不存在则创建一个<br> SimpleApplicationEventMulticaster 对象,并放入工厂</p></blockquote><h2 id="onrefresh-钩子函数-支持子类对刷新的扩展" tabindex="-1"><a class="header-anchor" href="#onrefresh-钩子函数-支持子类对刷新的扩展"><span>onRefresh(): 钩子函数,支持子类对刷新的扩展</span></a></h2><h2 id="registerlisteners-注册监听" tabindex="-1"><a class="header-anchor" href="#registerlisteners-注册监听"><span>registerListeners(): 注册监听</span></a></h2><blockquote><ul><li>将静态指定的事件监听器逐一添加到事件传播器中.</li><li>将动态指定的事件监听器加入时间传播器中.</li><li>发布应用早期事件, 这时应用的事件传播器已经就绪...</li></ul></blockquote><h2 id="finishbeanfactoryinitialization-结束beanfactory初始化-并初始化一些特殊bean对象-比如非懒加载的bean" tabindex="-1"><a class="header-anchor" href="#finishbeanfactoryinitialization-结束beanfactory初始化-并初始化一些特殊bean对象-比如非懒加载的bean"><span>finishBeanFactoryInitialization(): 结束BeanFactory初始化,并初始化一些特殊Bean对象.比如非懒加载的Bean.</span></a></h2><h3 id="初始化上下文转换服务" tabindex="-1"><a class="header-anchor" href="#初始化上下文转换服务"><span>初始化上下文转换服务.</span></a></h3><h3 id="如果没有指定-标签解析器-就使用环境中的默认转换器进行转换-getenvironment-resolveplaceholders-strval" tabindex="-1"><a class="header-anchor" href="#如果没有指定-标签解析器-就使用环境中的默认转换器进行转换-getenvironment-resolveplaceholders-strval"><span>如果没有指定 标签解析器, 就使用环境中的默认转换器进行转换 getEnvironment().resolvePlaceholders(strVal).</span></a></h3><h3 id="尽早初始化-loadtimeweaveraware-bean-以便尽早注册其变压器。" tabindex="-1"><a class="header-anchor" href="#尽早初始化-loadtimeweaveraware-bean-以便尽早注册其变压器。"><span>尽早初始化 LoadTimeWeaverAware bean，以便尽早注册其变压器。</span></a></h3><h3 id="设置临时类加载器为null-停止使用临时类加载器" tabindex="-1"><a class="header-anchor" href="#设置临时类加载器为null-停止使用临时类加载器"><span>设置临时类加载器为null, 停止使用临时类加载器.</span></a></h3><h3 id="freezeconfiguration-冻结所有bean定义信息" tabindex="-1"><a class="header-anchor" href="#freezeconfiguration-冻结所有bean定义信息"><span>freezeConfiguration(): 冻结所有bean定义信息.</span></a></h3><blockquote><ul><li>设置 冻结 标示符 为true</li><li>为 frozenBeanDefinitionNames 赋值</li></ul></blockquote><h3 id="preinstantiatesingletons-初始化非懒加载的bean" tabindex="-1"><a class="header-anchor" href="#preinstantiatesingletons-初始化非懒加载的bean"><span>preInstantiateSingletons(): 初始化非懒加载的bean</span></a></h3><h4 id="重新包装-beandefinitionnames-属性为一个arraylist" tabindex="-1"><a class="header-anchor" href="#重新包装-beandefinitionnames-属性为一个arraylist"><span>重新包装 beanDefinitionNames 属性为一个ArrayList</span></a></h4><h4 id="循环上一步包装的集合-根据beanname创建bean" tabindex="-1"><a class="header-anchor" href="#循环上一步包装的集合-根据beanname创建bean"><span>循环上一步包装的集合, 根据beanName创建bean</span></a></h4><h5 id="getmergedlocalbeandefinition-根据beanname获取本地bean定义信息缓存" tabindex="-1"><a class="header-anchor" href="#getmergedlocalbeandefinition-根据beanname获取本地bean定义信息缓存"><span>getMergedLocalBeanDefinition(): 根据beanName获取本地bean定义信息缓存.</span></a></h5><h5 id="判断获取的beandefinition所代表的bean-非抽象类-是单例-非懒加载" tabindex="-1"><a class="header-anchor" href="#判断获取的beandefinition所代表的bean-非抽象类-是单例-非懒加载"><span>判断获取的BeanDefinition所代表的bean 非抽象类, 是单例, 非懒加载</span></a></h5><h5 id="判断是否为factorybean的子类" tabindex="-1"><a class="header-anchor" href="#判断是否为factorybean的子类"><span>判断是否为FactoryBean的子类</span></a></h5><h6 id="是则" tabindex="-1"><a class="header-anchor" href="#是则"><span>是则</span></a></h6><blockquote><ul><li>调用getBean() 获取这个工厂bean的实例, 获取时需要添加前缀 FACTORY_BEAN_PREFIX</li><li>判断 上一步获取到的对象是否为FactoryBean的子类实例</li><li>判断是否为SmartFactroyBean的子类实例</li><li>获取当前FactoryBean是否希望初始化(isEagerInit());</li><li>是则, 再次通过getBean加载此对象(本次不再添加前缀)</li></ul></blockquote><h6 id="非则-调用-getbean-创建bean实例" tabindex="-1"><a class="header-anchor" href="#非则-调用-getbean-创建bean实例"><span>非则, 调用 getBean() 创建bean实例</span></a></h6><blockquote><ul><li>transformedBeanName(): 规范化beanName</li><li>getSingleton(): 在单例池中获取当前对象</li></ul></blockquote><h4 id="循环上上一步创建的集合-根据beanname获取已经创建好的bean-并判断bean是否为-smartinitializingsingleton的子类实例-是则运行bean的aftersingletonsinstantiated函数" tabindex="-1"><a class="header-anchor" href="#循环上上一步创建的集合-根据beanname获取已经创建好的bean-并判断bean是否为-smartinitializingsingleton的子类实例-是则运行bean的aftersingletonsinstantiated函数"><span>循环上上一步创建的集合, 根据beanName获取已经创建好的bean, 并判断bean是否为 SmartInitializingSingleton的子类实例, 是则运行bean的afterSingletonsInstantiated函数.</span></a></h4><h2 id="finishrefresh-结束刷新-并发布结束刷新事件" tabindex="-1"><a class="header-anchor" href="#finishrefresh-结束刷新-并发布结束刷新事件"><span>finishRefresh(): 结束刷新, 并发布结束刷新事件.</span></a></h2><h3 id="clearresourcecaches-清空资源缓存" tabindex="-1"><a class="header-anchor" href="#clearresourcecaches-清空资源缓存"><span>clearResourceCaches(): 清空资源缓存</span></a></h3><blockquote><p>清空 DefaultResourceLoader 中的 resourceCaches 对象</p></blockquote><h3 id="initlifecycleprocessor-初始化生命周期管理" tabindex="-1"><a class="header-anchor" href="#initlifecycleprocessor-初始化生命周期管理"><span>initLifecycleProcessor(): 初始化生命周期管理</span></a></h3><blockquote><p>判断Bean工厂中是否存在 LIFECYCLE_PROCESSOR_BEAN_NAME 对象, 不存在则创建一个 DefaultLifecycleProcessor对象;</p></blockquote><h3 id="getlifecycleprocessor-onrefresh-刷新生命周期管理器" tabindex="-1"><a class="header-anchor" href="#getlifecycleprocessor-onrefresh-刷新生命周期管理器"><span>getLifecycleProcessor().onRefresh(): 刷新生命周期管理器</span></a></h3><blockquote><ul><li>startBeans(): 启动bean的生命周期</li><li>将 running 标识符设置为 true</li></ul></blockquote><h3 id="发布上下文刷新事件" tabindex="-1"><a class="header-anchor" href="#发布上下文刷新事件"><span>发布上下文刷新事件</span></a></h3><blockquote><p>通过上下文的 publish函数 发布 ContextRefreshedEvent 对象</p></blockquote><h3 id="参与-livebeansview-mbean-如果处于活动状态" tabindex="-1"><a class="header-anchor" href="#参与-livebeansview-mbean-如果处于活动状态"><span>参与 LiveBeansView MBean（如果处于活动状态）</span></a></h3>',63),l=[s];function o(c,h){return a(),n("div",null,l)}const b=e(t,[["render",o],["__file","Spring-Refresh-Method-Process.html.vue"]]),f=JSON.parse('{"path":"/article/Spring-Refresh-Method-Process.html","title":"Spring框架refresh()执行流程","lang":"zh-CN","frontmatter":{"title":"Spring框架refresh()执行流程","icon":"note","isOriginal":true,"date":"2023-04-26T00:00:00.000Z","tag":["Spring","开发笔记"],"category":"Java","description":"Spring框架refresh函数执行流程Spring框架refresh函数执行流程 prepareRefresh(): 准备刷新 设置启动时间 容器关闭标示符设置为false 容器可用标示符设置为true initPropertySources(): 钩子函数, 初始化属性资源, getEnvironment().validateRequiredPr...","head":[["meta",{"property":"og:url","content":"https://blog.guocay.com/article/Spring-Refresh-Method-Process.html"}],["meta",{"property":"og:site_name","content":"GuoCay"}],["meta",{"property":"og:title","content":"Spring框架refresh()执行流程"}],["meta",{"property":"og:description","content":"Spring框架refresh函数执行流程Spring框架refresh函数执行流程 prepareRefresh(): 准备刷新 设置启动时间 容器关闭标示符设置为false 容器可用标示符设置为true initPropertySources(): 钩子函数, 初始化属性资源, getEnvironment().validateRequiredPr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://blog.guocay.com/docs/images/20230426-002.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-18T11:09:04.000Z"}],["meta",{"property":"article:author","content":"GuoCay"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"开发笔记"}],["meta",{"property":"article:published_time","content":"2023-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-18T11:09:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring框架refresh()执行流程\\",\\"image\\":[\\"https://blog.guocay.com/docs/images/20230426-002.png\\"],\\"datePublished\\":\\"2023-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-18T11:09:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GuoCay\\",\\"email\\":\\"guocay@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"prepareRefresh(): 准备刷新","slug":"preparerefresh-准备刷新","link":"#preparerefresh-准备刷新","children":[]},{"level":2,"title":"obtainFreshBeanFactory(): 获取Bean工厂","slug":"obtainfreshbeanfactory-获取bean工厂","link":"#obtainfreshbeanfactory-获取bean工厂","children":[{"level":3,"title":"如果上下文中已经存在Bean工厂,将先销毁.","slug":"如果上下文中已经存在bean工厂-将先销毁","link":"#如果上下文中已经存在bean工厂-将先销毁","children":[]},{"level":3,"title":"createBeanFactory(): 创建Bean工厂,使用DefaultListableBeanFactory对象;","slug":"createbeanfactory-创建bean工厂-使用defaultlistablebeanfactory对象","link":"#createbeanfactory-创建bean工厂-使用defaultlistablebeanfactory对象","children":[]},{"level":3,"title":"customizeBeanFactory(): 自定义设置Bean工厂","slug":"customizebeanfactory-自定义设置bean工厂","link":"#customizebeanfactory-自定义设置bean工厂","children":[]},{"level":3,"title":"loadBeanDefinitions(): 加载Bean定义信息","slug":"loadbeandefinitions-加载bean定义信息","link":"#loadbeandefinitions-加载bean定义信息","children":[]}]},{"level":2,"title":"prepareBeanFactory(): 准备Bean工厂","slug":"preparebeanfactory-准备bean工厂","link":"#preparebeanfactory-准备bean工厂","children":[{"level":3,"title":"设置Bean工厂的类加载器","slug":"设置bean工厂的类加载器","link":"#设置bean工厂的类加载器","children":[]},{"level":3,"title":"如果不忽略SpEL表达式,则设置StandardBeanExpressionResolver对象用于解析SpEL表达式;","slug":"如果不忽略spel表达式-则设置standardbeanexpressionresolver对象用于解析spel表达式","link":"#如果不忽略spel表达式-则设置standardbeanexpressionresolver对象用于解析spel表达式","children":[]},{"level":3,"title":"设置属性编辑注册器","slug":"设置属性编辑注册器","link":"#设置属性编辑注册器","children":[]},{"level":3,"title":"添加一个用于Aware感知的PostProcessor","slug":"添加一个用于aware感知的postprocessor","link":"#添加一个用于aware感知的postprocessor","children":[]},{"level":3,"title":"忽略一部分Aware的实现类, 因为这个时候还无法感知这部分动作","slug":"忽略一部分aware的实现类-因为这个时候还无法感知这部分动作","link":"#忽略一部分aware的实现类-因为这个时候还无法感知这部分动作","children":[]},{"level":3,"title":"注册一批 可解析依赖项","slug":"注册一批-可解析依赖项","link":"#注册一批-可解析依赖项","children":[]},{"level":3,"title":"注册一个用于监听探测的PostProcessor类.","slug":"注册一个用于监听探测的postprocessor类","link":"#注册一个用于监听探测的postprocessor类","children":[]},{"level":3,"title":"设置 LoadTimeWeaver","slug":"设置-loadtimeweaver","link":"#设置-loadtimeweaver","children":[]},{"level":3,"title":"注册一批环境变量","slug":"注册一批环境变量","link":"#注册一批环境变量","children":[]}]},{"level":2,"title":"postProcessBeanFactory(): 钩子函数.通知子容器BeanFactory准备好了","slug":"postprocessbeanfactory-钩子函数-通知子容器beanfactory准备好了","link":"#postprocessbeanfactory-钩子函数-通知子容器beanfactory准备好了","children":[]},{"level":2,"title":"invokeBeanFactoryPostProcessors(): 执行Bean工厂后置处理器","slug":"invokebeanfactorypostprocessors-执行bean工厂后置处理器","link":"#invokebeanfactorypostprocessors-执行bean工厂后置处理器","children":[]},{"level":2,"title":"registerBeanPostProcessors(): 注册Bean的后置处理器","slug":"registerbeanpostprocessors-注册bean的后置处理器","link":"#registerbeanpostprocessors-注册bean的后置处理器","children":[]},{"level":2,"title":"initMessageSource(): 初始化消息源","slug":"initmessagesource-初始化消息源","link":"#initmessagesource-初始化消息源","children":[]},{"level":2,"title":"initApplicationEventMulticaster(): 初始化事件传播器","slug":"initapplicationeventmulticaster-初始化事件传播器","link":"#initapplicationeventmulticaster-初始化事件传播器","children":[]},{"level":2,"title":"onRefresh(): 钩子函数,支持子类对刷新的扩展","slug":"onrefresh-钩子函数-支持子类对刷新的扩展","link":"#onrefresh-钩子函数-支持子类对刷新的扩展","children":[]},{"level":2,"title":"registerListeners(): 注册监听","slug":"registerlisteners-注册监听","link":"#registerlisteners-注册监听","children":[]},{"level":2,"title":"finishBeanFactoryInitialization(): 结束BeanFactory初始化,并初始化一些特殊Bean对象.比如非懒加载的Bean.","slug":"finishbeanfactoryinitialization-结束beanfactory初始化-并初始化一些特殊bean对象-比如非懒加载的bean","link":"#finishbeanfactoryinitialization-结束beanfactory初始化-并初始化一些特殊bean对象-比如非懒加载的bean","children":[{"level":3,"title":"初始化上下文转换服务.","slug":"初始化上下文转换服务","link":"#初始化上下文转换服务","children":[]},{"level":3,"title":"如果没有指定 标签解析器, 就使用环境中的默认转换器进行转换 getEnvironment().resolvePlaceholders(strVal).","slug":"如果没有指定-标签解析器-就使用环境中的默认转换器进行转换-getenvironment-resolveplaceholders-strval","link":"#如果没有指定-标签解析器-就使用环境中的默认转换器进行转换-getenvironment-resolveplaceholders-strval","children":[]},{"level":3,"title":"尽早初始化 LoadTimeWeaverAware bean，以便尽早注册其变压器。","slug":"尽早初始化-loadtimeweaveraware-bean-以便尽早注册其变压器。","link":"#尽早初始化-loadtimeweaveraware-bean-以便尽早注册其变压器。","children":[]},{"level":3,"title":"设置临时类加载器为null, 停止使用临时类加载器.","slug":"设置临时类加载器为null-停止使用临时类加载器","link":"#设置临时类加载器为null-停止使用临时类加载器","children":[]},{"level":3,"title":"freezeConfiguration(): 冻结所有bean定义信息.","slug":"freezeconfiguration-冻结所有bean定义信息","link":"#freezeconfiguration-冻结所有bean定义信息","children":[]},{"level":3,"title":"preInstantiateSingletons(): 初始化非懒加载的bean","slug":"preinstantiatesingletons-初始化非懒加载的bean","link":"#preinstantiatesingletons-初始化非懒加载的bean","children":[]}]},{"level":2,"title":"finishRefresh(): 结束刷新, 并发布结束刷新事件.","slug":"finishrefresh-结束刷新-并发布结束刷新事件","link":"#finishrefresh-结束刷新-并发布结束刷新事件","children":[{"level":3,"title":"clearResourceCaches(): 清空资源缓存","slug":"clearresourcecaches-清空资源缓存","link":"#clearresourcecaches-清空资源缓存","children":[]},{"level":3,"title":"initLifecycleProcessor(): 初始化生命周期管理","slug":"initlifecycleprocessor-初始化生命周期管理","link":"#initlifecycleprocessor-初始化生命周期管理","children":[]},{"level":3,"title":"getLifecycleProcessor().onRefresh(): 刷新生命周期管理器","slug":"getlifecycleprocessor-onrefresh-刷新生命周期管理器","link":"#getlifecycleprocessor-onrefresh-刷新生命周期管理器","children":[]},{"level":3,"title":"发布上下文刷新事件","slug":"发布上下文刷新事件","link":"#发布上下文刷新事件","children":[]},{"level":3,"title":"参与 LiveBeansView MBean（如果处于活动状态）","slug":"参与-livebeansview-mbean-如果处于活动状态","link":"#参与-livebeansview-mbean-如果处于活动状态","children":[]}]}],"git":{"createdTime":1684408144000,"updatedTime":1684408144000,"contributors":[{"name":"GuoCay","email":"guocay@gmail.com","commits":1}]},"readingTime":{"minutes":3.85,"words":1156},"localizedDate":"2023年4月26日","excerpt":"<figure><img src=\\"/docs/images/20230426-002.png\\" alt=\\"Spring框架refresh函数执行流程\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>Spring框架refresh函数执行流程</figcaption></figure>\\n<h2>prepareRefresh(): 准备刷新</h2>\\n<blockquote>\\n<ul>\\n<li>设置启动时间</li>\\n<li>容器关闭标示符设置为false</li>\\n<li>容器可用标示符设置为true</li>\\n<li>initPropertySources(): 钩子函数, 初始化属性资源,</li>\\n<li>getEnvironment().validateRequiredProperties(): 验证必要属性必须存在.</li>\\n<li>清空已有的监听器(如果有的话),并重新从applicationListeners属性中加载</li>\\n</ul>\\n</blockquote>","autoDesc":true}');export{b as comp,f as data};
