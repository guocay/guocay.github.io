const e=JSON.parse('{"key":"v-da337122","path":"/article/Software-Desgin-Model.html","title":"软件开发设计模式浅谈","lang":"zh-CN","frontmatter":{"title":"软件开发设计模式浅谈","icon":"note","isOriginal":true,"date":"2023-04-26T00:00:00.000Z","tag":["设计模式"],"category":"计算机科学","description":"设计模式关系 设计模式关系图 设计模式原则 开闭原则（Open Close Principle） 开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。","head":[["meta",{"property":"og:url","content":"https://guocay.github.io/article/Software-Desgin-Model.html"}],["meta",{"property":"og:site_name","content":"GuoCay"}],["meta",{"property":"og:title","content":"软件开发设计模式浅谈"}],["meta",{"property":"og:description","content":"设计模式关系 设计模式关系图 设计模式原则 开闭原则（Open Close Principle） 开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-15T03:17:53.000Z"}],["meta",{"property":"article:author","content":"GuoCay"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2023-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-15T03:17:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"软件开发设计模式浅谈\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-15T03:17:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GuoCay\\",\\"email\\":\\"guocay@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"设计模式关系","slug":"设计模式关系","link":"#设计模式关系","children":[]},{"level":2,"title":"设计模式原则","slug":"设计模式原则","link":"#设计模式原则","children":[]},{"level":2,"title":"设计模式分类","slug":"设计模式分类","link":"#设计模式分类","children":[{"level":3,"title":"创建类","slug":"创建类","link":"#创建类","children":[]},{"level":3,"title":"结构类","slug":"结构类","link":"#结构类","children":[]},{"level":3,"title":"行为类","slug":"行为类","link":"#行为类","children":[]}]}],"git":{"createdTime":1682910292000,"updatedTime":1684120673000,"contributors":[{"name":"GuoCay","email":"guocay@gmail.com","commits":2},{"name":"aCay","email":"guocay@gmail.com","commits":2}]},"readingTime":{"minutes":4.56,"words":1369},"filePathRelative":"article/Software-Desgin-Model.md","localizedDate":"2023年4月26日","excerpt":"<h2> 设计模式关系</h2>\\n<figure><img src=\\"/docs/images/20230501-001.jpg\\" alt=\\"设计模式关系图\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>设计模式关系图</figcaption></figure>\\n<h2> 设计模式原则</h2>\\n<ol>\\n<li>开闭原则（Open Close Principle）</li>\\n</ol>\\n<blockquote>\\n<p>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>\\n</blockquote>","autoDesc":true}');export{e as data};
