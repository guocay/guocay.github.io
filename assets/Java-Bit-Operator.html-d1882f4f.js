import{_ as t,X as d,Y as r,Z as a}from"./framework-d314e57d.js";const e={},n=a("<table><thead><tr><th>操作符</th><th>实例</th><th>等效于</th><th>备注</th></tr></thead><tbody><tr><td>&lt;&lt; 左移</td><td>// 8int a = 1 &lt;&lt; 3</td><td>int a = 1 * 2^3</td><td>左移操作相当于 左移数 乘以2的N次幂(正整数, 需要考虑int的最大值)左移操作的本质是将数字转换为二进制,舍弃前N位.向后补N个0;</td></tr><tr><td>&gt;&gt; 右移</td><td>int a = 1 &gt;&gt; 3</td><td>``</td><td>右移操作的本质是将数字转换为二进制,舍弃后N位,向前补N个0;</td></tr><tr><td>&gt;&gt;&gt; 无符号右移</td><td>``</td><td>忽略符号位, 空位补0</td><td>``</td></tr><tr><td>&amp; 与</td><td>// 1int a = 1 &amp; 1// 0int b = 1 &amp; 0// 0int c = 0 &amp; 0</td><td>``</td><td>与计算是将两个数的二进制表示后进行对位比较,仅当同位都为1时输出1,否则输出0;</td></tr><tr><td></td><td>或</td><td>// 1int a = 1</td><td>1// 1int b = 1</td></tr><tr><td>^ 位异或</td><td>``</td><td>二进制表达后,相同位置的数相同为0,相反为1.</td><td>``</td></tr><tr><td>~ 位非</td><td>``</td><td>二进制表达后,取反</td><td>``</td></tr></tbody></table>",1),i=[n];function o(c,_){return d(),r("div",null,i)}const l=t(e,[["render",o],["__file","Java-Bit-Operator.html.vue"]]);export{l as default};
