<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于金仓数据库不被主流框架(如Activiti,Flowable)支持的思考与解决方案</title>
    <url>/202110/20007eeb8144.html</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote>
<p>去年底的时候,我们的项目中需要使用工作流实现业务.经过一些讨论,最终决定使用开源引擎Activiti进行集成.在现阶段大环境下,项目要求需要使用自主可控的国产数据库–KingBase.</p>
</blockquote>
<blockquote>
<p>用过Activiti,Flowable的同学应该都知道,这类工具是强依赖数据库的.特别是在项目启动的过程中就会创建一批数据表用于存储BMPN模型,工作流实例和历史数据等.这就导致在项目代码启动连接数据库的时候,就会报错显示 “不支持KingBaseES的数据库”.</p>
</blockquote>
<h2 id="问题思考"><a href="#问题思考" class="headerlink" title="问题思考"></a>问题思考</h2><ol>
<li>通过查看Flowable的文档和源码,我们了解到这类工具在启动时会利用工具 LiquiBase 对数据库的数据表进行初始化(LiquiBase是一个方言无关的数据库版本管理工具).而LiquiBase在运行时会获取数据库产品类型后动态根据资源中的数据表定义生成符合当前数据库方言的建表语句.后运行初始化表;</li>
<li>从网上公开的知识可以了解到,金仓的数据库KingBase是根据开源数据库PostgreSQL魔改而来,然后通过汇总得知,在KingBase对于pgSQL的差异中包括(但不限于) 命令名,系统表和视图,函数的语法等等.从后端程序员的使用角度出发,能与我们产生兼容性联系的基本都在系统表和视图这部分的差异弥补;</li>
<li>通过对JDBC标准的了解.我们得知每一个实现了JDBC标准的Driver都需要返回客户端一个字符串以表明自己的数据库名称(类型).所以,如果我们在KingBase的数据库驱动中将产品类型从”KingBaseES”换为”postgresql”.理论上就能骗过工具;</li>
</ol>
<h2 id="编码逻辑"><a href="#编码逻辑" class="headerlink" title="编码逻辑"></a>编码逻辑</h2><ol>
<li>通过对现状的评估,得益于KingBase的魔改对于pgSQL的实现并不是破坏性的.我们觉得最小成本的修改应该是这样的,在关键节点中欺骗Activiti.让其始终认为自己连接的是pgSQL.而不是KingBase;</li>
<li>KingBase数据库对于pgSQL还修改了所有的系统表和视图,但也仅是修改了前缀(比如pg_tables修改成sys_tables).而在一些开源框架中也会调用这些系统表来实现逻辑.基于此,我们觉得可以手动创建一批视图pg_tables去映射sys_tables;</li>
</ol>
<h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><ol>
<li>反编译kingbase数据库连接驱动kingbase8-8.x.x.jar;找到实现了java.sql.DatabaseMetaData接口的类;</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// KingBase中实现了DatabaseMetaData的类在com.kingbase8.jdbc.KbDatabaseMetaData类中</span></span><br><span class="line"><span class="comment">// 找到如下的函数 将返回的 &quot;KingbaseES&quot; 修改为 &quot;postgresql&quot;</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">getDatabaseProductName</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">     <span class="comment">// return &quot;KingbaseES&quot;;</span></span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;postgresql&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将修改过的KbDatabaseMetaData.class编译后重新打包入驱动中;</li>
<li>手动到数据库创建视图 pg_tables(如有需要也可创建别的,这里仅作演示目的.);</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> pg_tables <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sys_tables;</span><br></pre></td></tr></table></figure>

<h2 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h2><ol>
<li>依赖于java中的类加载器AppClassLoader中关于加载资源时定义的是个数组,且指向src目录的资源永远在下标零处.所以,只要在src中定义的类永远优先于其他地方的类加载;</li>
<li>打开你需要集成的工具框架,找到用于解析数据库类型进行后续操作的类.在src下创建同名同路径的java文件;</li>
<li>复制反编译后类中所有的代码至src目录下的文件后,增加对应的配置以在解析到”KingbaseES”进行自定义操作;</li>
</ol>
<h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><ol>
<li>LiquiBase是一个方言无关的数据库版本管理工具,真心好用!!!会根据定义好的xml内容对数据库的初始化,数据表版本进行管理,Mekatok即是使用LiquiBase对数据库进行管理.再不需要在项目初次启动时先运行数据库建表脚本,也不需要再针对数据库加字段什么的汇总脚本各个环境先同步数据库.</li>
</ol>
]]></content>
      <tags>
        <tag>Mekatok</tag>
        <tag>开发笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>关于domain对象与DTO对象间的相互拷贝的思考与优化思路</title>
    <url>/202110/7d2804acf239.html</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote>
<p>我们后端在开发的过程中总是在domain(数据库映射对象)和dto(数据传输对象)之间进行数据互转.以匹配对象在各生命周期的运行.</p>
</blockquote>
<blockquote>
<p>在实际的开发中,我们发现大多数的domain对象和dto对象内的字段完全一致.创建两个内容完全一样的类.从大部分情况下考虑都显得多余.</p>
</blockquote>
<blockquote>
<p>代码中经常出现大量的代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dto.setAttr(domain.getAttr());</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>冗长,且不优雅.</p>
</blockquote>
<h2 id="问题思考"><a href="#问题思考" class="headerlink" title="问题思考"></a>问题思考</h2><ol>
<li>市面上有很多用于Bean对象之间拷贝的工具类如Apache和SpringFramework的BeanUtils,他的实现机制时通过运行时反射将同名属性之间进行拷贝,且这些工具最大的问题还在于为了适配更多的情况做了很多的其他工作.这对于我们只是需要简单的值拷贝不太友善;</li>
<li>MapStruct是一个通过定义转换接口,并基于JSR269在编译期实现对象互转的工具.但这种工具的弊端在于仅能实现一对一的转换(单向,一个接口仅能实现一个特定类转换到另一个特定类).</li>
<li>我们现在的需求是,可以运行时动态的一对多转换,可以一个属性对多个属性(不同名)转换和可以不再写更多的相同类;</li>
</ol>
<h2 id="编码逻辑"><a href="#编码逻辑" class="headerlink" title="编码逻辑"></a>编码逻辑</h2><ol>
<li>我们抽象出一个”拆装箱”的概念,domain是一个拆箱后的对象(可以理解为拆箱后存入数据库),dto是一个装箱后对象(可以理解为装箱后运走).</li>
<li>在现实生活中很多货物是可以从仓库中拿出直接用于运输的.所以,当装箱后的对象和拆箱后的对象本质上是一个对象,拆箱后的对象也就是一个装箱后的对象;</li>
<li>基于此,我们可以抽象出对象的集成关系:domain对象继承DTO对象;</li>
<li>在对象间数据拷贝方面,我们可以通过自定义注解指定对象间互转的逻辑.并在对应对象的父类中定义函数在运行时动态的反射拷贝值;</li>
</ol>
<h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><p>domain与DTO之间的关系; View 继承 Transport</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DTO对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 数据传输对象基类 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GuoKai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transport</span> <span class="keyword">extends</span> <span class="title class_">Model</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于数据传输对象的拆箱</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 拆箱后的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 拆箱后的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> &lt;T <span class="keyword">extends</span> <span class="title class_">View</span>&gt; T <span class="title function_">unBoxing</span><span class="params">(Class&lt;T&gt; clazz)</span>&#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">view</span> <span class="operator">=</span> ReflectUtil.newInstance(clazz);</span><br><span class="line">        <span class="comment">// todo 循环获取当前类的字段</span></span><br><span class="line">        Arrays.stream(ReflectUtil.getFields(getClass())).parallel()</span><br><span class="line">                <span class="comment">// todo 过滤出需要拆箱的字段</span></span><br><span class="line">                .filter(field -&gt; AnnotationUtil.hasAnnotation(field,Unboxing.class))</span><br><span class="line">                .forEach(field -&gt; &#123;</span><br><span class="line">                    <span class="comment">// todo 获取字段中所有 Unboxing 描述信息</span></span><br><span class="line">                    Arrays.stream(field.getAnnotationsByType(Unboxing.class)).parallel()</span><br><span class="line">                            <span class="comment">// todo 过滤出需要转换的类</span></span><br><span class="line">                            .filter(anno -&gt; clazz.isAssignableFrom(anno.clazz()))</span><br><span class="line">                            .forEach(anno -&gt; &#123;</span><br><span class="line">                                <span class="type">var</span> <span class="variable">viewField</span> <span class="operator">=</span> ReflectUtil.getField(clazz, anno.field());</span><br><span class="line">                                <span class="comment">// todo 设置字段反射,绕过权限校验</span></span><br><span class="line">                                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                                viewField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                                <span class="comment">// todo 设置值</span></span><br><span class="line">                                ReflectUtil.setFieldValue(view, viewField, ReflectUtil.getFieldValue(<span class="built_in">this</span>, field));</span><br><span class="line">                            &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * domain对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 上帝的归上帝,凯撒的归凯撒</span></span><br><span class="line"><span class="comment"> * 抽象出这个类是为了映射视图,从而尽可能的不在项目中书写SQL.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GuoKai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/8/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">View</span>&lt;T <span class="keyword">extends</span> <span class="title class_">View</span>&gt; <span class="keyword">implements</span> <span class="title class_">Transport</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于数据库对象装箱</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 装箱的类描述</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;F&gt; 装箱的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 装箱后的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;F <span class="keyword">extends</span> <span class="title class_">Transport</span>&gt; F <span class="title function_">boxing</span><span class="params">(Class&lt;F&gt; clazz)</span>&#123;</span><br><span class="line">        <span class="type">F</span> <span class="variable">tran</span> <span class="operator">=</span> ReflectUtil.newInstance(clazz);</span><br><span class="line">        <span class="comment">// todo 循环获取当前类的字段</span></span><br><span class="line">        Arrays.stream(ReflectUtil.getFields(getClass())).parallel()</span><br><span class="line">                <span class="comment">// todo 过滤出需要拆箱的字段</span></span><br><span class="line">                .filter(field -&gt; AnnotationUtil.hasAnnotation(field, Boxing.class))</span><br><span class="line">                .forEach(field -&gt; &#123;</span><br><span class="line">                    <span class="comment">// todo 获取字段中所有 Boxing 描述信息</span></span><br><span class="line">                    Arrays.stream(field.getAnnotationsByType(Boxing.class)).parallel()</span><br><span class="line">                            <span class="comment">// todo 过滤出需要转换的类</span></span><br><span class="line">                            .filter(anno -&gt; clazz.isAssignableFrom(anno.clazz()))</span><br><span class="line">                            .forEach(anno -&gt; &#123;</span><br><span class="line">                                <span class="type">var</span> <span class="variable">tranField</span> <span class="operator">=</span> ReflectUtil.getField(clazz, anno.field());</span><br><span class="line">                                <span class="comment">// todo 设置字段反射,绕过权限校验</span></span><br><span class="line">                                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                                tranField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                                <span class="comment">// todo 设置值</span></span><br><span class="line">                                ReflectUtil.setFieldValue(tran, tranField, ReflectUtil.getFieldValue(<span class="built_in">this</span>, field));</span><br><span class="line">                            &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> tran;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义注解,设置属性间关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库实体对象装箱时的属性指定</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GuoKai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Repeatable(Boxing.List.class)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Boxing &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于指定装箱的数据传输类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 装箱的类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Transport</span>&gt; clazz();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于指定类中的字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 类中的字段名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">field</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Documented</span></span><br><span class="line">    <span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@interface</span> List&#123;</span><br><span class="line">        Boxing[] value();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据传输对象拆箱时的属性指定</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GuoKai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Repeatable(Unboxing.List.class)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Unboxing &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于指定装箱的数据传输类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 装箱的类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">View</span>&gt; clazz();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于指定类中的字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 类中的字段名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">field</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Documented</span></span><br><span class="line">    <span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@interface</span> List&#123;</span><br><span class="line">        Unboxing[] value();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// domain对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Table</span> <span class="keyword">extends</span> <span class="title class_">View</span>&lt;Table&gt;&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Boxing(clazz=TableDto.class,field=&quot;nameDto&quot;)</span></span><br><span class="line">    <span class="meta">@Boxing(clazz=TableDto1.class,field=&quot;nameDto1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DTO对象1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TableDto</span> <span class="keyword">implements</span> <span class="title class_">Transport</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Unboxing(clazz=Table.class,field=&quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String nameDto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DTO对象2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TableDto1</span> <span class="keyword">implements</span> <span class="title class_">Transport</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Unboxing(clazz=Table.class,field=&quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String nameDto1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拆箱</span></span><br><span class="line"><span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> TableDto().unBoxing(Table.class);</span><br><span class="line"><span class="type">Table</span> <span class="variable">table1</span> <span class="operator">=</span> TableDto1().unBoxing(Table.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装箱</span></span><br><span class="line"><span class="type">TableDto</span> <span class="variable">tableDto</span> <span class="operator">=</span> Table().boxing(TableDto.class);</span><br><span class="line"><span class="type">TableDto1</span> <span class="variable">tableDto1</span> <span class="operator">=</span> Table().boxing(TableDto1.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><ol>
<li>boxing函数和unboxing函数在转换时,可以基于”享元模式”做一些缓存以优化性能;</li>
</ol>
]]></content>
      <tags>
        <tag>Mekatok</tag>
        <tag>开发笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>基于事件机制的服务内削峰和低耦合(同步)操作的思考与实现</title>
    <url>/202110/fffaf8a962c8.html</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote>
<p>去年底在做项目的时候,我们有这样的一个需求,用户上传文档操作,首先将文档保存至服务器后再上传到ES数据库中解析文档.解析文档是一个很消耗时间的操作,我们不能等待解析完成后再对用户返回操作成功.</p>
</blockquote>
<blockquote>
<p>今年初在做项目的时候,我们有这样的一个需求,用户接收消息后,需要根据是否节假日且用户是否设置节假日自动回复对消息进行自动回复处理.且自动回复操作的成功与否要影响到消息是否接收.我们在分析需求后觉得这必须是一个事务性的服务.自动回复失败将不接收消息.</p>
</blockquote>
<h2 id="问题思考"><a href="#问题思考" class="headerlink" title="问题思考"></a>问题思考</h2><ol>
<li>这两个需求正好是两个极端,一个是服务细节影响最终结果,另一个是服务细节不影响最终结果;</li>
<li>另外,我们在讨论需求后发现.在以后项目的升级过程中,在这些服务节点很有可能再增加其他细节(比如,接收消息后,除自动回复外,还需要做别的操作).这个时候,如果我们在函数中再追加别的代码必定会增加测试的难度和耦合度;</li>
<li>Spring Event是Spring Framework中一个很重要的功能之一.本质是依赖BeanFactory中声明的监听器,事件发布后在同一个线程中线性调用监听器的响应,既然在同一个线程中就可以实现异常的监控与控制.完美实现第二个业务场景;</li>
<li>而第一个业务场景相较于第二个,只需将监听器的响应放到新的线程中执行,即可实现.而scheduling也是Spring Framework中一个很重要的功能之一.可以实现函数级异步操作;</li>
</ol>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>事件与活动的包装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 平台内对于应用事件的包装</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GuoKai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/8/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Event</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> <span class="keyword">implements</span> <span class="title class_">Model</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">905529385550550456L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 元数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Event</span><span class="params">(T source)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 事件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getName();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事件备注</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 事件备注</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">description</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;默认事件描述&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事件数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 事件数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getMeta</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) getSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插件所依赖的活动</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GuoKai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Activity</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Event</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6996847203171194108L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于存储活动已执行的插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Class&lt;? <span class="keyword">extends</span> <span class="title class_">Plugin</span>&gt;&gt; plugins = CollUtil.newLinkedList();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 元数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Activity</span><span class="params">(T source)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插件执行成功时的回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;活动 &#123;&#125;, 执行成功!&quot;</span>, name());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插件执行失败时的回调</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> throwable 异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">failure</span><span class="params">(Throwable throwable)</span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;活动 &#123;&#125;, 执行错误!&quot;</span>, name());</span><br><span class="line">        log.error(throwable.getMessage(), throwable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加当前活动已执行成功的插件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> plugin 已执行过的插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;F <span class="keyword">extends</span> <span class="title class_">Plugin</span>&gt; <span class="keyword">void</span> <span class="title function_">addPlugin</span><span class="params">(Class&lt;F&gt; plugin)</span>&#123;</span><br><span class="line">        plugins.add(plugin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 活动名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.name();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 活动备注</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">description</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.description();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 活动元数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getMeta</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getMeta();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事件监听的基类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GuoKai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Listener</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Event</span>&lt;?&gt;&gt; <span class="keyword">extends</span> <span class="title class_">ApplicationListener</span>&lt;T&gt;, WithAssertions &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事件执行函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event 依赖对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">action</span><span class="params">(T event)</span> <span class="keyword">throws</span> RuntimeException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写 ApplicationListener 的事件响应函数,用于执行action()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event 元数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(T event)</span>&#123;</span><br><span class="line">        action(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插件基类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GuoKai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Plugin</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Activity</span>&lt;?&gt;&gt; <span class="keyword">extends</span> <span class="title class_">Listener</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否执行当前插件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity 依赖对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作与否</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">support</span><span class="params">(T activity)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行 插件内 函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event 活动数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(T event)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(support(event))&#123;</span><br><span class="line">            action(event);</span><br><span class="line">            event.addPlugin(getClass());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring Event 操作工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GuoKai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/8/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">EventCenter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布事件至 Spring</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event 事件对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">publish</span><span class="params">(Event&lt;?&gt; event)</span>&#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">element</span> <span class="operator">=</span> ThreadUtil.getStackTraceElement(<span class="number">4</span>);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125; 发布了&#123;&#125;: &#123;&#125;, 内容为: &#123;&#125;&quot;</span>,</span><br><span class="line">                String.format(<span class="string">&quot;%s.%s()&quot;</span>,element.getClassName(),element.getMethodName()),</span><br><span class="line">                Activity.class.isAssignableFrom(event.getClass()) ? <span class="string">&quot;活动&quot;</span> : <span class="string">&quot;事件&quot;</span>,</span><br><span class="line">                event.description(), JSONUtil.toJsonStr(event.getSource()));</span><br><span class="line">        SpringUtil.getApplicationContext().publishEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插件使用中心</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GuoKai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">PluginCenter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布活动,执行插件.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity 活动</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 泛型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Activity</span>&lt;?&gt;&gt; <span class="keyword">void</span> <span class="title function_">script</span><span class="params">(T activity)</span>&#123;</span><br><span class="line">        script(activity, Activity::success, (item, throwable) -&gt; item.failure(throwable));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布活动,执行插件.回调的优先级高于activity中的定义.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity 活动</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> success 成功回调</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 泛型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Activity</span>&lt;?&gt;&gt; <span class="keyword">void</span> <span class="title function_">script</span><span class="params">(T activity, Consumer&lt;T&gt; success)</span>&#123;</span><br><span class="line">        script(activity, Activity::success, (item,Throwable) -&gt; &#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布活动,执行插件.回调的优先级高于activity中的定义.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity 活动</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> failure 失败回调</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 泛型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Activity</span>&lt;?&gt;&gt; <span class="keyword">void</span> <span class="title function_">script</span><span class="params">(T activity, BiConsumer&lt;T, Throwable&gt; failure)</span>&#123;</span><br><span class="line">        script(activity, (item) -&gt; &#123;&#125;, failure);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布活动,执行插件.回调的优先级高于activity中的定义.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity 活动</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> success 成功回调</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> failure 失败回调</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 泛型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Activity</span>&lt;?&gt;&gt; <span class="keyword">void</span> <span class="title function_">script</span><span class="params">(T activity, Consumer&lt;T&gt; success, BiConsumer&lt;T, Throwable&gt; failure)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            EventCenter.publish(activity);</span><br><span class="line">            success.accept(activity);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable throwable)&#123;</span><br><span class="line">            failure.accept(activity, throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取插件总数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Activity</span>&lt;?&gt;&gt; Integer <span class="title function_">count</span><span class="params">(Class&lt;T&gt; activity)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getPlugins(activity).size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否包含某个活动的插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Activity</span>&lt;?&gt;&gt; <span class="type">boolean</span> <span class="title function_">hasPlugin</span><span class="params">(Class&lt;T&gt; activity)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count(activity) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Activity</span>&lt;?&gt;&gt; List&lt;Plugin&gt; <span class="title function_">getPlugins</span><span class="params">(Class&lt;T&gt; activity)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SpringUtil.getBeansOfType(Plugin.class).values().stream()</span><br><span class="line">                .filter(plugin -&gt; plugin.getClass().equals(activity)).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事件是个异步操作,本质上是在不同的线程中运行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 创建事件描述</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomEvent</span> <span class="keyword">extends</span> <span class="title class_">Event</span>&lt;CustomEvent&gt;&#123;&#125;</span><br><span class="line"><span class="comment">// 异步事件发布</span></span><br><span class="line">EventCenter.publish(CustomEvent());</span><br><span class="line"><span class="comment">// 异步事件响应</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomListener</span>&lt;CustomEvent&gt; <span class="keyword">implements</span> <span class="title class_">Listener</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">action</span><span class="params">(CustomEvent event)</span><span class="keyword">throws</span> RuntimeException&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事件是个同步操作,本质上是在同一线程中运行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 创建活动描述</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span>&lt;CustomActivity&gt;&#123;&#125;</span><br><span class="line"><span class="comment">// 同步活动发布</span></span><br><span class="line">PluginCenter.script(CustomActivity());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步活动响应</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomPlugin</span>&lt;CustomActivity&gt; <span class="keyword">implements</span> <span class="title class_">Plugin</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">action</span><span class="params">(CustomActivity activity)</span><span class="keyword">throws</span> RuntimeException&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">support</span><span class="params">(CustomActivity activity)</span>&#123;</span><br><span class="line">        <span class="comment">// 是否运行当前插件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><ol>
<li>本功能的实现参考了Spring Plugin的设计理念,熟悉这个包可以更好的理解这部分内容;</li>
</ol>
]]></content>
      <tags>
        <tag>Mekatok</tag>
        <tag>开发笔记</tag>
      </tags>
  </entry>
</search>
